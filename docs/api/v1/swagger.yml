openapi: 3.0.3
info:
  version: 1.0.0
  title: Wikalpa
  description: API documentation for the Wikalpa project.
  termsOfService: https://opensource.org/ToS
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
paths:
  /auth/register:
    post:
      tags:
        - Auth
      security: []
      summary: Register a new user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user
              properties:
                user:
                  type: object
                  properties:
                    username:
                      type: string
                      example: john.doe
                    password:
                      type: string
                      example: super-strong-password
                    password_confirmation:
                      type: string
                      example: super-strong-password
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Created
                  data:
                    type: object
                    properties:
                      user:
                        $ref: "#/components/schemas/User"
                      token:
                        $ref: "#/components/schemas/Token"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
  /auth/login:
    post:
      tags:
        - Auth
      security: []
      summary: Login into an existing user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: john.doe
                password:
                  type: string
                  example: super-strong-password
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OK
                  data:
                    type: object
                    properties:
                      user:
                        $ref: "#/components/schemas/User"
                      token:
                        $ref: "#/components/schemas/Token"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /communities:
    get:
      tags:
        - Community
      summary: Retrieve all communities.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OK
                  data:
                    type: object
                    properties:
                      communities:
                        type: array
                        items:
                          $ref: "#/components/schemas/Community"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      tags:
        - Community
      summary: Create a new community.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - community
              properties:
                community:
                  type: object
                  properties:
                    name:
                      type: string
                      example: programmer.humor
                    description:
                      type: string
                      example: css is programming language
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Created
                  data:
                    type: object
                    properties:
                      community:
                        $ref: "#/components/schemas/Community"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
  /communities/{id}:
    get:
      tags:
        - Community
      summary: Show a specific community.
      parameters:
        - $ref: "#/components/parameters/Identifier"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OK
                  data:
                    type: object
                    properties:
                      community:
                        $ref: "#/components/schemas/Community"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      tags:
        - Community
      summary: Update a community.
      parameters:
        - $ref: "#/components/parameters/Identifier"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - community
              properties:
                community:
                  type: object
                  properties:
                    name:
                      type: string
                      example: programmer.humor
                    description:
                      type: string
                      example: css is programming language
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OK
                  data:
                    type: object
                    properties:
                      community:
                        $ref: "#/components/schemas/Community"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
  /communities/{community_id}/members:
    get:
      tags:
        - Community Member
      summary: Retrieve all community members.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OK
                  data:
                    type: object
                    properties:
                      members:
                        type: array
                        items:
                          $ref: "#/components/schemas/Member"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      tags:
        - Community Member
      summary: Join a community.
      parameters:
        - $ref: "#/components/parameters/IdentifierCommunity"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Created
                  data:
                    type: object
                    properties:
                      member:
                        $ref: "#/components/schemas/Member"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
  /members/{id}:
    delete:
      tags:
        - Member
      summary: Leave a community.
      parameters:
        - $ref: "#/components/parameters/Identifier"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OK
                  data:
                    type: object
                    properties:
                      member:
                        $ref: "#/components/schemas/Member"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
  /communities/{community_id}/posts:
    get:
      tags:
        - Community Post
      summary: Retrieve all community posts.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OK
                  data:
                    type: object
                    properties:
                      posts:
                        type: array
                        items:
                          $ref: "#/components/schemas/Post"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      tags:
        - Community Post
      summary: Create a new community post.
      parameters:
        - $ref: "#/components/parameters/IdentifierCommunity"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - post
              properties:
                post:
                  type: object
                  properties:
                    body:
                      type: string
                      example: just setting up my wklp
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Created
                  data:
                    type: object
                    properties:
                      post:
                        $ref: "#/components/schemas/Post"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
  /posts:
    get:
      tags:
        - Post
      summary: Retrieve all posts.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OK
                  data:
                    type: object
                    properties:
                      posts:
                        type: array
                        items:
                          $ref: "#/components/schemas/Post"
        "404":
          $ref: "#/components/responses/NotFound"
  /posts/{id}:
    get:
      tags:
        - Post
      summary: Show a specific post.
      parameters:
        - $ref: "#/components/parameters/Identifier"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OK
                  data:
                    type: object
                    properties:
                      post:
                        $ref: "#/components/schemas/Post"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      tags:
        - Post
      summary: Update a post.
      parameters:
        - $ref: "#/components/parameters/Identifier"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - post
              properties:
                post:
                  type: object
                  properties:
                    body:
                      type: string
                      example: just setting up my wklp
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OK
                  data:
                    type: object
                    properties:
                      post:
                        $ref: "#/components/schemas/Post"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
  /posts/{post_id}/comments:
    get:
      tags:
        - Post Comment
      summary: Retrieve all post comments.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OK
                  data:
                    type: object
                    properties:
                      comments:
                        type: array
                        items:
                          $ref: "#/components/schemas/Comment"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      tags:
        - Post Comment
      summary: Create a new post comment.
      parameters:
        - $ref: "#/components/parameters/IdentifierPost"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - comment
              properties:
                comment:
                  type: object
                  properties:
                    body:
                      type: string
                      example: just setting up my wklp
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Created
                  data:
                    type: object
                    properties:
                      comment:
                        $ref: "#/components/schemas/Comment"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
  /posts/{post_id}/likes:
    get:
      tags:
        - Post Like
      summary: Retrieve all post likes.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OK
                  data:
                    type: object
                    properties:
                      likes:
                        type: array
                        items:
                          $ref: "#/components/schemas/Like"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      tags:
        - Post Like
      summary: Like a post.
      parameters:
        - $ref: "#/components/parameters/IdentifierPost"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Created
                  data:
                    type: object
                    properties:
                      like:
                        $ref: "#/components/schemas/Like"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
  /comments/{id}:
    get:
      tags:
        - Comment
      summary: Show a specific comment.
      parameters:
        - $ref: "#/components/parameters/Identifier"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OK
                  data:
                    type: object
                    properties:
                      comment:
                        $ref: "#/components/schemas/Comment"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      tags:
        - Comment
      summary: Update a comment.
      parameters:
        - $ref: "#/components/parameters/Identifier"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - comment
              properties:
                comment:
                  type: object
                  properties:
                    body:
                      type: string
                      example: just setting up my wklp
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OK
                  data:
                    type: object
                    properties:
                      comment:
                        $ref: "#/components/schemas/Comment"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
  /comments/{comment_id}/likes:
    get:
      tags:
        - Comment Like
      summary: Retrieve all comment likes.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OK
                  data:
                    type: object
                    properties:
                      likes:
                        type: array
                        items:
                          $ref: "#/components/schemas/Like"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      tags:
        - Comment Like
      summary: Like a comment.
      parameters:
        - $ref: "#/components/parameters/IdentifierComment"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Created
                  data:
                    type: object
                    properties:
                      like:
                        $ref: "#/components/schemas/Like"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
  /comments/{comment_id}/replies:
    get:
      tags:
        - Comment Reply
      summary: Retrieve all comment replies.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OK
                  data:
                    type: object
                    properties:
                      replies:
                        type: array
                        items:
                          $ref: "#/components/schemas/Reply"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      tags:
        - Comment Reply
      summary: Create a new comment reply.
      parameters:
        - $ref: "#/components/parameters/IdentifierComment"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - reply
              properties:
                reply:
                  type: object
                  properties:
                    body:
                      type: string
                      example: just setting up my wklp
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Created
                  data:
                    type: object
                    properties:
                      reply:
                        $ref: "#/components/schemas/Reply"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
  /replies/{id}:
    get:
      tags:
        - Reply
      summary: Show a specific reply.
      parameters:
        - $ref: "#/components/parameters/Identifier"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OK
                  data:
                    type: object
                    properties:
                      reply:
                        $ref: "#/components/schemas/Reply"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      tags:
        - Reply
      summary: Update a reply.
      parameters:
        - $ref: "#/components/parameters/Identifier"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - reply
              properties:
                reply:
                  type: object
                  properties:
                    body:
                      type: string
                      example: just setting up my wklp
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OK
                  data:
                    type: object
                    properties:
                      reply:
                        $ref: "#/components/schemas/Reply"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
  /replies/{reply_id}/likes:
    get:
      tags:
        - Reply Like
      summary: Retrieve all reply likes.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OK
                  data:
                    type: object
                    properties:
                      likes:
                        type: array
                        items:
                          $ref: "#/components/schemas/Like"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      tags:
        - Reply Like
      summary: Like a reply.
      parameters:
        - $ref: "#/components/parameters/IdentifierReply"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Created
                  data:
                    type: object
                    properties:
                      like:
                        $ref: "#/components/schemas/Like"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
  /likes/{id}:
    delete:
      tags:
        - Like
      summary: Delete a like.
      parameters:
        - $ref: "#/components/parameters/Identifier"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OK
                  data:
                    type: object
                    properties:
                      like:
                        $ref: "#/components/schemas/Like"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
  /users:
    get:
      tags:
        - User
      summary: Retrieve all users.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OK
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          $ref: "#/components/schemas/User"
        "404":
          $ref: "#/components/responses/NotFound"
  /users/{id}:
    get:
      tags:
        - User
      summary: Show a specific user.
      parameters:
        - $ref: "#/components/parameters/Identifier"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OK
                  data:
                    type: object
                    properties:
                      user:
                        $ref: "#/components/schemas/User"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      tags:
        - User
      summary: Update a user.
      parameters:
        - $ref: "#/components/parameters/Identifier"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
                - password_confirmation
              properties:
                username:
                  type: string
                  example: john.doe
                password:
                  type: string
                  example: super-strong-password
                password_confirmation:
                  type: string
                  example: super-strong-password
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OK
                  data:
                    type: object
                    properties:
                      user:
                        $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
  /users/{user_id}/buddies:
    get:
      tags:
        - User Buddy
      summary: Retrieve all user buddies.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OK
                  data:
                    type: object
                    properties:
                      buddies:
                        type: array
                        items:
                          $ref: "#/components/schemas/Buddy"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      tags:
        - User Buddy
      summary: Follow a user.
      parameters:
        - $ref: "#/components/parameters/IdentifierUser"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Created
                  data:
                    type: object
                    properties:
                      buddy:
                        $ref: "#/components/schemas/Buddy"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
  /users/{user_id}/comments:
    get:
      tags:
        - User Comment
      summary: Retrieve all user comments.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OK
                  data:
                    type: object
                    properties:
                      comments:
                        type: array
                        items:
                          $ref: "#/components/schemas/Comment"
        "404":
          $ref: "#/components/responses/NotFound"
  /users/{user_id}/communities:
    get:
      tags:
        - User Community
      summary: Retrieve all user communities.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OK
                  data:
                    type: object
                    properties:
                      communities:
                        type: array
                        items:
                          $ref: "#/components/schemas/Community"
        "404":
          $ref: "#/components/responses/NotFound"
  /buddies/{id}:
    delete:
      tags:
        - Buddy
      summary: Unfollow a user.
      parameters:
        - $ref: "#/components/parameters/Identifier"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OK
                  data:
                    type: object
                    properties:
                      buddy:
                        $ref: "#/components/schemas/Buddy"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
security:
  - BearerAuth: []
tags:
  - name: Auth
    description: Endpoints related for authentication and authorization.
  - name: Community
    description: Endpoints related for community resources.
  - name: Community Member
    description: Endpoints related for community member resources.
  - name: Member
    description: Endpoints related for member resources.
  - name: Post
    description: Endpoints related for post resources.
  - name: Community Post
    description: Endpoints related for community post resources.
  - name: Post Like
    description: Endpoints related for post like resources.
  - name: Post Comment
    description: Endpoints related for post comment resources.
  - name: Comment
    description: Endpoints related for comment resources.
  - name: Comment Like
    description: Endpoints related for comment like resources.
  - name: Comment Reply
    description: Endpoints related for comment reply resources.
  - name: Reply
    description: Endpoints related for replies resources.
  - name: Reply Like
    description: Endpoints related for reply like resources.
  - name: Like
    description: Endpoints related for like resources.
  - name: User
    description: Endpoints related for user resources.
  - name: User Buddy
    description: Endpoints related for user buddy resources.
  - name: User Comment
    description: Endpoints related for user comment resources.
  - name: User Community
    description: Endpoints related for user community resources.
  - name: Buddy
    description: Endpoints related for buddy resources.
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    Identifier:
      in: path
      name: id
      required: true
      schema:
        type: integer
        example: 1
    IdentifierComment:
      in: path
      name: comment_id
      required: true
      schema:
        type: integer
        example: 1
    IdentifierCommunity:
      in: path
      name: community_id
      required: true
      schema:
        type: integer
        example: 1
    IdentifierPost:
      in: path
      name: post_id
      required: true
      schema:
        type: integer
        example: 1
    IdentifierReply:
      in: path
      name: reply_id
      required: true
      schema:
        type: integer
        example: 1
    IdentifierUser:
      in: path
      name: user_id
      required: true
      schema:
        type: integer
        example: 1
  schemas:
    Buddy:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        buddy_id:
          type: integer
          example: 1
        created_at:
          type: string
          example: "2021-12-12 12:12:12"
        updated_at:
          type: string
          example: "2021-12-12 12:12:12"
    Comment:
      type: object
      properties:
        id:
          type: integer
          example: 1
        post_id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        body:
          type: string
          example: just setting up my wklp
        created_at:
          type: string
          example: "2021-12-12 12:12:12"
        updated_at:
          type: string
          example: "2021-12-12 12:12:12"
    Community:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: programmer.humor
        description:
          type: string
          example: css is programming language
        created_at:
          type: string
          example: "2021-12-12 12:12:12"
        updated_at:
          type: string
          example: "2021-12-12 12:12:12"
    Like:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        likeable_type:
          type: string
          enum:
            - Comment
            - Post
            - Reply
        likeable_id:
          type: integer
          example: 1
        created_at:
          type: string
          example: "2021-12-12 12:12:12"
        updated_at:
          type: string
          example: "2021-12-12 12:12:12"
    Member:
      type: object
      properties:
        id:
          type: integer
          example: 1
        community_id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        created_at:
          type: string
          example: "2021-12-12 12:12:12"
        updated_at:
          type: string
          example: "2021-12-12 12:12:12"
    Post:
      type: object
      properties:
        id:
          type: integer
          example: 1
        community_id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        body:
          type: string
          example: just setting up my wklp
        created_at:
          type: string
          example: "2021-12-12 12:12:12"
        updated_at:
          type: string
          example: "2021-12-12 12:12:12"
    Reply:
      type: object
      properties:
        id:
          type: integer
          example: 1
        comment_id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        body:
          type: string
          example: just setting up my wklp
        created_at:
          type: string
          example: "2021-12-12 12:12:12"
        updated_at:
          type: string
          example: "2021-12-12 12:12:12"
    Token:
      type: string
      example: eyJhbGciOiJIUzI1NiJ9.eyJpZCI6MX0.GRKevXZcuSlwDfjKYXB_plUM4m5Pu4S_VgPsFj1bxrI
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: john.doe
        created_at:
          type: string
          example: "2021-12-12 12:12:12"
        updated_at:
          type: string
          example: "2021-12-12 12:12:12"
  responses:
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: Forbidden
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: Not Found
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: Unauthorized
    UnprocessableEntity:
      description: Unprocessable Entity
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: Unprocessable Entity
              errors:
                type: object
                properties:
                  attribute:
                    type: array
                    items:
                      type: string
                      example: error message
servers:
  - url: http://localhost:3000/api/v1
    description: Local server
  - url: http://localhost:3001/api/v1
    description: Local-Docker server
